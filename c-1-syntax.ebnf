program             ::= ( functiondefinition )* <EOF>

functiondefinition  ::= type <ID> "(" ")" "{" statementlist "}"
functioncall        ::= <ID> "(" ")"

statementlist       ::= ( block )*
block               ::= "{" statementlist "}"
                      | statement
statement           ::= ifstatement
                      | returnstatement ";"
                      | printf ";"
                      | statassignment ";"
                      | functioncall ";"

ifstatement         ::= <KW_IF> "(" assignment ")" block
returnstatement     ::= <KW_RETURN> ( assignment )?

printf              ::= <KW_PRINTF> "(" assignment ")"
type                ::= <KW_BOOLEAN>
                      | <KW_FLOAT>
                      | <KW_INT>
                      | <KW_VOID>

statassignment      ::= <ID> "=" assignment
assignment          ::= ( ( <ID> "=" assignment ) | expr )
expr                ::= simpexpr ( ( "==" | "!=" | "<=" | ">=" | "<" | ">" ) simpexpr )?
simpexpr            ::= ( "-" )? term ( ( "+" | "-" | "||" ) term )*
term                ::= factor ( ( "*" | "/" | "&&" ) factor )*
factor              ::= <CONST_INT>
                      | <CONST_FLOAT>
                      | <CONST_BOOLEAN>
                      | functioncall
                      | <ID>
                      | "(" assignment ")"
                      
                      
                      
                      
                      

program             -> functiondefinition program 
program             -> <EOF>

functiondefinition  -> type <ID> "(" ")" "{" statementlist "}"
functioncall        -> "(" ")"

statementlist       -> block statementlist
statementlist       -> epsilon


block               -> "{" statementlist "}"
block               -> statement

statement           -> ifstatement
statement           -> returnstatement ";"
statement           -> printf ";"
statement           -> <id> statement2 ";"

statement2           -> functioncall
statement2           -> statassignment

ifstatement         -> <KW_IF> "(" assignment ")" block

returnstatement     -> <KW_RETURN> returnstatement2

returnstatement2    -> assignment
returnstatement2    -> epsilon

printf              -> <KW_PRINTF> "(" assignment ")"

type                -> <KW_BOOLEAN>
type                -> <KW_FLOAT>
type                -> <KW_INT>
type                -> <KW_VOID>

statassignment      -> "=" assignment

assignment          -> <ID> "=" assignment
assignment          -> expr

expr                -> simpexpr expr2

expr2				-> operator simpexpr
expr2				-> epsilon

operator			-> ">"
operator			-> "<"
operator			-> ">="
operator			-> "<="
operator			-> "=="
operator			-> "!="

simpexpr            -> "-" term simpexpr2
simpexpr            -> term simpexpr2

simpexpr2			-> "+" term simpexpr2
simpexpr2			-> "-" term simpexpr2
simpexpr2			-> "||" term simpexpr2
simpexpr2			-> epsilon

term                -> factor term2

term2				-> "*" factor term2
term2				-> "/" factor term2
term2				-> "&&" factor term2
term2				-> epsilon

factor              -> <CONST_INT>
factor              -> <CONST_FLOAT>
factor              -> <CONST_BOOLEAN>
factor              -> <ID> factor2
factor              -> "(" assignment ")"

factor2           	-> functioncall
factor2				-> epsilon


Non-terminals: program functiondefinition type statementlist functioncall block statement ifstatement returnstatement printf statassignment assignment expr simpexpr term simpexpr2 factor term2
Terminals: <EOF> <ID> "(" ")" "{" "}" ";" <KW_IF> <KW_RETURN> <KW_PRINTF> <KW_BOOLEAN> <KW_FLOAT> <KW_INT> <KW_VOID> "=" ">" "<" ">=" "<=" "!=" "==" "-" "+" "||" "*" "/" "&&" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
EPS = statementlist simpexpr2 term2
FIRST[program] = <EOF> <KW_BOOLEAN> <KW_FLOAT> <KW_INT> <KW_VOID>
FIRST[functiondefinition] = <KW_BOOLEAN> <KW_FLOAT> <KW_INT> <KW_VOID>
FIRST[type] = <KW_BOOLEAN> <KW_FLOAT> <KW_INT> <KW_VOID>
FIRST[statementlist] = <ID> "{" <KW_IF> <KW_RETURN> <KW_PRINTF>
FIRST[functioncall] = <ID>
FIRST[block] = <ID> "{" <KW_IF> <KW_RETURN> <KW_PRINTF>
FIRST[statement] = <ID> <KW_IF> <KW_RETURN> <KW_PRINTF>
FIRST[ifstatement] = <KW_IF>
FIRST[returnstatement] = <KW_RETURN>
FIRST[printf] = <KW_PRINTF>
FIRST[statassignment] = <ID>
FIRST[assignment] = <ID> "(" "-" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
FIRST[expr] = <ID> "(" "-" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
FIRST[simpexpr] = <ID> "(" "-" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
FIRST[term] = <ID> "(" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
FIRST[simpexpr2] = "-" "+" "||"
FIRST[factor] = <ID> "(" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
FIRST[term2] = "*" "/" "&&"
FOLLOW[program] =
FOLLOW[functiondefinition] = <EOF> <KW_BOOLEAN> <KW_FLOAT> <KW_INT> <KW_VOID>
FOLLOW[type] = <ID>
FOLLOW[statementlist] = "}"
FOLLOW[functioncall] = ")" ";" ">" "<" ">=" "<=" "!=" "==" "-" "+" "||" "*" "/" "&&"
FOLLOW[block] = <ID> "{" "}" <KW_IF> <KW_RETURN> <KW_PRINTF>
FOLLOW[statement] = <ID> "{" "}" <KW_IF> <KW_RETURN> <KW_PRINTF>
FOLLOW[ifstatement] = <ID> "{" "}" <KW_IF> <KW_RETURN> <KW_PRINTF>
FOLLOW[returnstatement] = ";"
FOLLOW[printf] = ";"
FOLLOW[statassignment] = ";"
FOLLOW[assignment] = ")" ";"
FOLLOW[expr] = ")" ";"
FOLLOW[simpexpr] = ")" ";" ">" "<" ">=" "<=" "!=" "=="
FOLLOW[term] = ")" ";" ">" "<" ">=" "<=" "!=" "==" "-" "+" "||"
FOLLOW[simpexpr2] = ")" ";" ">" "<" ">=" "<=" "!=" "=="
FOLLOW[factor] = ")" ";" ">" "<" ">=" "<=" "!=" "==" "-" "+" "||" "*" "/" "&&"
FOLLOW[term2] = ")" ";" ">" "<" ">=" "<=" "!=" "==" "-" "+" "||"









PREDICT:
program ->  functiondefinition program : <KW_BOOLEAN> <KW_FLOAT> <KW_INT> <KW_VOID>
program ->  <EOF> : <EOF>
functiondefinition ->  type <ID> "(" ")" "{" statementlist "}" : <KW_BOOLEAN> <KW_FLOAT> <KW_INT> <KW_VOID>
functioncall ->  <ID> "(" ")" : <ID>
statementlist ->  block statementlist : <ID> "{" <KW_IF> <KW_RETURN> <KW_PRINTF>
statementlist -> epsilon : "}"
block ->  "{" statementlist "}" : "{"
block ->  statement : <ID> <KW_IF> <KW_RETURN> <KW_PRINTF>
statement ->  ifstatement : <KW_IF>
statement ->  returnstatement ";" : <KW_RETURN>
statement ->  printf ";" : <KW_PRINTF>
statement ->  statassignment ";" : <ID>
statement ->  functioncall ";" : <ID>
ifstatement ->  <KW_IF> "(" assignment ")" block : <KW_IF>
returnstatement ->  <KW_RETURN> assignment : <KW_RETURN>
returnstatement ->  <KW_RETURN> : <KW_RETURN>
printf ->  <KW_PRINTF> "(" assignment ")" : <KW_PRINTF>
type ->  <KW_BOOLEAN> : <KW_BOOLEAN>
type ->  <KW_FLOAT> : <KW_FLOAT>
type ->  <KW_INT> : <KW_INT>
type ->  <KW_VOID> : <KW_VOID>
statassignment ->  <ID> "=" assignment : <ID>
assignment ->  <ID> "=" assignment : <ID>
assignment ->  expr : <ID> "(" "-" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
expr ->  simpexpr ">" simpexpr : <ID> "(" "-" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
expr ->  simpexpr "<" simpexpr : <ID> "(" "-" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
expr ->  simpexpr ">=" simpexpr : <ID> "(" "-" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
expr ->  simpexpr "<=" simpexpr : <ID> "(" "-" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
expr ->  simpexpr "!=" simpexpr : <ID> "(" "-" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
expr ->  simpexpr "==" simpexpr : <ID> "(" "-" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
expr ->  simpexpr : <ID> "(" "-" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
simpexpr ->  "-" term simpexpr2 : "-"
simpexpr ->  term simpexpr2 : <ID> "(" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
simpexpr2 ->  "+" term simpexpr2 : "+"
simpexpr2 ->  "-" term simpexpr2 : "-"
simpexpr2 ->  "||" term simpexpr2 : "||"
simpexpr2 -> epsilon : ")" ";" ">" "<" ">=" "<=" "!=" "=="
term ->  factor term2 : <ID> "(" <CONST_INT> <CONST_FLOAT> <CONST_BOOLEAN>
term2 ->  "*" factor term2 : "*"
term2 ->  "/" factor term2 : "/"
term2 ->  "&&" factor term2 : "&&"
term2 -> epsilon : ")" ";" ">" "<" ">=" "<=" "!=" "==" "-" "+" "||"
factor ->  <CONST_INT> : <CONST_INT>
factor ->  <CONST_FLOAT> : <CONST_FLOAT>
factor ->  <CONST_BOOLEAN> : <CONST_BOOLEAN>
factor ->  functioncall : <ID>
factor ->  <ID> : <ID>
factor ->  "(" assignment ")" : "("



program             -> functiondefinition program 
program             -> EF

functiondefinition  -> type ID ( ) { statementlist }
functioncall        -> ( )

statementlist       -> block statementlist
statementlist       -> epsilon


block               -> { statementlist }
block               -> statement

statement           -> ifstatement
statement           -> returnstatement ;
statement           -> printf ;
statement           -> ID statement2 ;

statement2           -> functioncall
statement2           -> statassignment

ifstatement         -> KF ( assignment ) block

returnstatement     -> KR returnstatement2

returnstatement2    -> assignment
returnstatement2    -> epsilon

printf              -> KP ( assignment )

type                -> KB
type                -> KF
type                -> KI
type                -> KV

statassignment      -> = assignment

assignment          -> ID assignment2
assignment          -> exprOI

assignment2          -> = assignment
assignment2          -> exprMI

expr                -> simpexpr expr2
	
exprMI				->simpexprMI expr2
exprOI				->simpexprOI expr2

expr2				-> operator simpexpr
expr2				-> epsilon

operator			-> >
operator			-> <
operator			-> >=
operator			-> <=
operator			-> ==
operator			-> !=

simpexpr            -> - term simpexpr2
simpexpr            -> term simpexpr2

simpexprMI			-> termMI simpexpr2
simpexprOI			-> - term simpexpr2
simpexprOI			-> termOI simpexpr2

simpexpr2			-> + term simpexpr2
simpexpr2			-> - term simpexpr2
simpexpr2			-> || term simpexpr2
simpexpr2			-> epsilon

term                -> factor term2

termMI				->factor2  term2
termOI				->factorOI  term2

term2				-> * factor term2
term2				-> / factor term2
term2				-> && factor term2
term2				-> epsilon


factor              -> CI
factor              -> CF
factor              -> CB
factor              -> ID factor2
factor              -> ( assignment )

factorOI              -> CI
factorOI              -> CF
factorOI              -> CB
factorOI              -> ( assignment )

factor2           	-> functioncall
factor2				-> epsilon
